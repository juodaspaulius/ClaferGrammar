entrypoints Module ;


-- To regenerate grammar (see src/Makefile, the goal 'grammar'):
--         cd src/
--         bnfc -p "Language.Clafer.Front" --ghc clafer.cf
--         happy -gca Language/Clafer/Front/Parclafer.y
--         alex -g Language/Clafer/Front/Lexclafer.x

comment "//" ;
comment "/*" "*/" ;

Module.         Module ::= [Declaration] ;

EnumDecl.       Declaration ::= "enum" PosIdent "=" [EnumId] ;
ElementDecl.    Declaration ::= Element ;

Clafer.         Clafer ::= Abstract GCard PosIdent Super Card Init Elements ;
Constraint.     Constraint ::= "[" ConstraintExp "]" ;
SoftConstraint. SoftConstraint ::= "(" [Exp] ")";
Goal.   		Goal ::= "<<" [Exp] ">>" ;


AbstractEmpty.  Abstract ::= ;
Abstract.       Abstract ::= "abstract" ;

-- ElementsEmpty causes parsing problems
ElementsEmpty.  Elements ::= ;
ElementsList.   Elements ::= "{" [Element] "}" ;

Subclafer.      Element ::= Clafer ;
ClaferUse.      Element ::= "`" Name Card Elements ;
Subconstraint.  Element ::= Constraint ;
Subgoal. 		Element ::= Goal; 
Subsoftconstraint. Element ::= SoftConstraint;

SuperEmpty.     Super ::=  ;
SuperSome.      Super ::= SuperHow SetExp ;

SuperColon.     SuperHow ::= ":" ;
SuperArrow.     SuperHow ::= "->" ;
SuperMArrow.    SuperHow ::= "->>" ;

InitEmpty.      Init ::= ;
InitSome.       Init ::= InitHow Exp ;

InitHow_1.      InitHow ::= "=" ;
InitHow_2.      InitHow ::= ":=" ;

GCardEmpty.     GCard ::= ;
GCardXor.       GCard ::= "xor" ;
GCardOr.        GCard ::= "or" ;
GCardMux.       GCard ::= "mux" ;
GCardOpt.       GCard ::= "opt" ;
GCardInterval.  GCard ::= NCard ;

CardEmpty.      Card ::= ;
CardLone.       Card ::= "?" ;
CardSome.       Card ::= "+" ;
CardAny.        Card ::= "*" ;
CardNum.        Card ::= PosInteger ;
CardInterval.   Card ::= NCard ;

NCard.          NCard  ::= PosInteger ".." ExInteger ;

ExIntegerAst.   ExInteger ::= "*" ;
ExIntegerNum.   ExInteger ::= PosInteger ;

Path.           Name ::= [ModId] ;

FinalClaferExp. ConstraintExp ::= "final" ;
ConstrExp.      ConstraintExp ::= [Exp] ;

DeclAllDisj.    Exp   ::= "all" "disj" Decl "|" Exp ;
DeclAll.        Exp   ::= "all"        Decl "|" Exp ;
DeclQuantDisj.  Exp   ::= Quant "disj" Decl "|" Exp ;
DeclQuant.      Exp   ::= Quant        Decl "|" Exp ;
TmpPatBefore.   Exp ::= Exp1 "before" Exp1 PatternScope;
TmpPatAfter.    Exp ::= Exp1 "after" Exp1 PatternScope;
TmpInitially.   Exp ::= "initially" Exp1;
TmpFinally.     Exp ::= "finally" Exp1;
TmpLet.         Exp ::= "let" [VarBinding] "in" Exp1;
EGMax.          Exp1  ::= "max" Exp2 ;
EGMin.          Exp1  ::= "min" Exp2 ;
EIff.           Exp1  ::= Exp1 "<=>" Exp2 ;
EImplies.       Exp2  ::= Exp2 "=>"  Exp3 ;
EOr.            Exp3  ::= Exp3 "||"  Exp4 ;
EXor.           Exp4  ::= Exp4 "xor" Exp5 ;
EAnd.           Exp5  ::= Exp5 "&&"  Exp6 ;
LtlU.           Exp6  ::= Exp6 "U"  Exp7 ;
TmpUntil.       Exp6  ::= Exp6 "until"  Exp7 ;
LtlW.           Exp7  ::= Exp7 "W"  Exp8 ;
TmpWUntil.      Exp7  ::= Exp7 "weakuntil"  Exp8 ;
LtlF.           Exp8  ::= "F"  Exp9 ;
TmpEventually.  Exp8  ::= "eventually"  Exp9 ;
LtlG.           Exp9  ::= "G"  Exp10 ;
TmpGlobally.    Exp9  ::= "globally"  Exp10 ;
LtlX.           Exp10  ::= "X"  Exp12 ;
TmpNext.        Exp10  ::= "next"  Exp12 ;
ENeg.           Exp12  ::= "!" Exp13 ;
ELt.            Exp13  ::= Exp13 "<"  Exp14 ;
EGt.            Exp13  ::= Exp13 ">"  Exp14 ;
EEq.            Exp13  ::= Exp13 "="  Exp14 ;
ELte.           Exp13  ::= Exp13 "<=" Exp14 ;
EGte.           Exp13  ::= Exp13 ">=" Exp14 ;
ENeq.           Exp13  ::= Exp13 "!=" Exp14 ;
EIn.            Exp13  ::= Exp13 "in" Exp14 ;
ENin.           Exp13  ::= Exp13 "not" "in" Exp14 ;
QuantExp.       Exp14  ::= Quant Exp18 ;
EAdd.           Exp15  ::= Exp15  "+" Exp16 ;
ESub.           Exp15  ::= Exp15  "-" Exp16 ;
EMul.           Exp16 ::= Exp16 "*" Exp17 ;
EDiv.           Exp16 ::= Exp16 "/" Exp17 ;
ESumSetExp.     Exp17 ::= "sum" Exp18;
ECSetExp.       Exp17 ::= "#" Exp18 ;
EMinExp.        Exp17 ::= "-" Exp18 ;
EImpliesElse.   Exp18 ::= "if" Exp18 "then" Exp18 "else" Exp19 ;
EInt.           Exp19 ::= PosInteger ;
EDouble.        Exp19 ::= PosDouble ;
EStr.           Exp19 ::= PosString ;
ESetExp.        Exp19 ::= SetExp ;

PatScopeBetween.  PatternScope ::= "between" Exp "and" Exp ;
PatScopeUntil.    PatternScope ::= "after" Exp "until" Exp ;

Union.          SetExp  ::= SetExp  "++" SetExp1 ;
UnionCom.       SetExp  ::= SetExp  ","  SetExp1 ;
Difference.     SetExp1 ::= SetExp1 "--" SetExp2 ;
Intersection.   SetExp2 ::= SetExp2 "&"  SetExp3 ;
Domain.         SetExp3 ::= SetExp3 "<:" SetExp4 ;
Range.          SetExp4 ::= SetExp4 ":>" SetExp5 ;
Join.           SetExp5 ::= SetExp5 "."  SetExp6 ;
ClaferId.       SetExp6 ::= Name ;

Decl.           Decl ::= [LocId] ":" SetExp ;

VarBinding.     VarBinding ::= LocId "=" Name ;

QuantNo.        Quant ::= "no" ;
QuantLone.      Quant ::= "lone" ;
QuantOne.       Quant ::= "one" ;
QuantSome.      Quant ::= "some" ;

EnumIdIdent.    EnumId ::= PosIdent ;
ModIdIdent.     ModId  ::= PosIdent ;
LocIdIdent.     LocId  ::= PosIdent ;

separator           Declaration ""  ;
separator  nonempty EnumId      "|" ;
separator           Element     ""  ;
separator           Exp         ""  ;
separator  nonempty VarBinding  ","  ;
separator  nonempty LocId       ";" ;
separator  nonempty ModId       "\\" ;

coercions Exp 19 ;
coercions SetExp 6 ;

position token PosInteger (digit+) ;
position token PosDouble (digit+ '.' digit+ ('e' '-'? digit+)?) ;
position token PosString '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ;
position token PosIdent (letter (letter|digit|'_'|'\'')*) ;
